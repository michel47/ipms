
Ø,ß,But de cette page
-----------------

Cette page d√©finit un **R√©seau-pair-√†-pair** capable de produire un
texte dans un but bien d√©fini.

D√©finition
----------

-   Un **** est un ensemble de noeuds constitu√©s par des ordinateurs ou
    des t√©l√©phones portables reli√©s en pair-√†-pair <font color=red>√† un
    instant donn√© ?</font>

blockchain-texte
----------------

### noeud-initiateur

-   Un **noeud-initiateur** initie le r√©seau
    -   en lui donnant un nom (par exemple : **R√©seau-Revendications des
        Gilets Jaunes**).
    -   en d√©finissant le **but** que doit atteindre, le texte produit
        par ce r√©seau. Ce but est r√©dig√© sous forme d'une liste
        d'assertions (Voir par exemple )
-   Le r√©seau va se constituer sous la forme d'une
    **toile-de-confiance** enregistrant les cl√©-publiques des noeuds qui
    d√©sirent participer √† la r√©alisation de ce but.
-   Le r√©seau va produire deux blockchains:
    -   une **blockchain-texte** contenant les versions successives du
        texte √† produire
    -   une **blockchain-note** contenant les notes attribu√©es √† chaque
        version du texte par les diff√©rents noeuds

### cr√©ation de la blockchain-texte par le **noeud-initiateur**

-   le **noeud-initiateur** r√©dige une liste d'assertions d√©finissant le
    **but du r√©seau**.
-   le **noeud-initiateur** cr√©e le **bloc-genesis** de la
    **blockchain-texte** qui contient la liste des assertions du **but
    du r√©seau**.
-   le **noeud-initiateur** ajoute au bloc-genesis le **bloc-initial**
    contient la premi√®re version du texte exprimant le **but du
    r√©seau**.
-   le **noeud-initiateur** publie les deux blocs de la blockchain-texte
    vers un **noeud-r√©dacteur** tir√© au hasard parmi les noeuds
    connect√©s du r√©seau.

### noeud-r√©dacteur

#### diffusion de la blockchain-texte par les **noeud-r√©dacteurs**

√† un instant donn√© lorsqu'un **noeud-r√©dacteur** est tir√© au hasard :

-   il est √©limin√© de la liste des futurs **noeud-r√©dacteurs**.
-   il re√ßoit la **blockchain-texte**.
-   il v√©rifie la validit√© de la **blockchain-texte**.
-   il ajoute sa version.
-   il publie la nouvelle **blockchain-texte** vers un
    **noeud-r√©dacteur** tir√© au hasard parmi les **noeuds connect√©s du
    r√©seau n'ayant pas encore particip√©**.

#### modification du texte

-   chaque noeud peut cr√©er un nouveau bloc qui contiendra sa version du
    texte √† produire.
    -   publie la blockchain √† ses **pair-de-confiance**.

### un bloc-texte

-   une date
-   une cle publique de l'auteur
-   le texte
-   le hash du bloc-texte pr√©c√©dent

blockchain-notation
-------------------

### notation en local

A l'intant **t**, un noeud :

-   lit la blockchain-texte courante.
-   construit la liste des couples (hashs, cl√©-r√©dacteur).
-   construit la liste des hashs dont il n'est pas le r√©dacteur et qui
    ne sont pas dans sa **liste-de-bloc-notation**.

<!-- -->

-   extrait au plus 10 hashs au hasard.
    -   construit le **bloc-notation** pour chaque hash
    -   ajoute ce **bloc-notation** √† sa **liste-de-bloc-notation**

### cr√©ation de la liste-des-noeuds-connect√©s

-   Chaque fois qu'un noeud se connecte il ajoute sa cl√© √† la
    **liste-des-noeuds-connect√©s**.
-   Chaque fois qu'un noeud se d√©connecte sa cl√© est enlev√©e de la
    **liste-des-noeuds-connect√©s**.

### diffusion de la blockchain-notation par les **noeud-notateur**

√† un instant donn√© lorsqu'un **noeud-notateur** est tir√© au hasard :

-   il est √©limin√© de la liste des futurs **noeud-notateurs**.
-   il re√ßoit la **blockchain-notation**.
-   il v√©rifie la validit√© de la **blockchain-notation**.
-   il ajoute sa **liste-notation-locale**
-   il publie la nouvelle **blockchain-notation** vers un
    **noeud-notateur** tir√© au hasard parmi les **noeuds connect√©s du
    r√©seau n'ayant pas encore particip√©**.

### un bloc-notation

-   une date
-   une cle publique
-   le hash du bloc-texte
-   la note du texte

m√©thode
-------

il s'agit de construire des triplets (hash, cl√©, note) tels que le
nombre de couples (hash, cl√©) c'est-√†-dire le nombre de notes pour un
texte soit le m√™me pour tous les textes et toutes les notes.

il faut :

-   une liste des hashs (c'est la blockchain-texte)
    -   chaque texte est rep√©r√© par son hash
    -   un directory /some\_hash/ est cr√©√© sur ipms dans lequel tous les
        couples (cl√©,note) sont ajout√©s dans une blockchain
    -   pour un hash les cl√©s qui l'ont not√© doivent √™tre toutes
        distinctes.
    -   pour un hash le nombre de cl√©s qui l'ont not√© doit √™tre √©gal √†
        celui de n'importe quel autre. Sinon ce texte doit √™tre note par
        de nouveaux hashs pris au hasard parmi les connect√©s qui ont le
        plus faible nombre de notes.

<!-- -->

-   une liste des cl√©s (c'est la blockchain-pair)

<!-- -->

-   pour chaque cl√© (noeud) on construit une blockchain des hash que
    cette cl√© a not√©.

liste des hashs ayant le moins de notes
---------------------------------------

-   on cherche la liste de plus petite taille.
-   on construit la liste de tous les hashs ayant obtenus ce m√™me nombre
    de notes.

liste des cl√©s connect√©es √† t
-----------------------------

choix au hasard d'un noeud connect√©
-----------------------------------

-   l'instant **t** il y a une liste de cl√©s connect√©es.
-   on conna√Æt la liste des hashs que cette cl√© a d√©j√† not√©s.
-   on construit la liste des hashs ayant le moins de notes.
-   on tire au hasard un hash parmi ceux-ci.

------------------------------------------------------------------------
ß,