
ƒû#!/bin/sh

# this script publish the hash of /.brings to the peerid

set -e
. ./functions.sh

yellow="[33m"
red="[31m"
nc="[0m"

tic=$(date +%s)
script="$0"
script_basename=$(basename $script)

debug=0
verbose=0
trace=0
if echo "$*" | grep -q debug; then debug=1; fi
if echo "$*" | grep -q verbose; then verbose=1; fi
if echo "$*" | grep -q trace; then trace=1; fi

# set up local IPFS environment ...
export IPFS_PATH=$(pwd)/_ipfs
export PATH=_ipfs/bin:$(pwd)/bin:$PATH
#export LC_TIME='fr_FR.UTF-8'


if [ "x$1" = 'x-off' ]; then shift; offline='--offline'; fi

check_perl_local_lib;
check_ipfs_running;

gwhost=$(ipfs config Addresses.Gateway | cut -d'/' -f 3)
gwport=$(ipfs config Addresses.Gateway | cut -d'/' -f 5)
peerid=$(ipfs config Identity.PeerID)
eval "$(fullname -a $peerid | eyml)"

check_exist_brings;

publish_of_hashable_of_log_directory_of_action /my/identity/public.yml identity --raw-leaves;
publish_of_hashable_of_log_directory_of_action /public public '';

publish_root;

publish_of_hashable_of_log_directory_of_action /root root '';
publish_of_hashable_of_log_directory_of_action /my my --truncate;

publish_brings;

#ipfs files read "/.brings/brings.log"
ipfs files stat /.brings/brings.log
echo .
brkey=$(ipfs files stat --hash /.brings)
ipfs --offline name publish --allow-offline $brkey 1>/dev/null 2>&1
echo "url: https://gateway.ipfs.io/ipfs/$brkey"
echo "url: http://$gwhost:$gwport/ipns/$peerid"

ipfs $offline name publish --allow-offline $brkey | sed -e 's/^/info: /';

copy_to_my_friends_of_hash_of_who QmaCKrPUFzXjnCAxdL6af2TkSAEj9sneZXGH9gwZR3tvfY alaina;

copy_to_my_friends_of_hash_of_who QmZV2jsMziXwrsZx5fJ6LFXDLCSyP7oUdfjXdHSLbLXxKJ michelc; 

copy_to_my_friends_of_hash_of_who QmVmTsmUVuphtck8AWsz4fhUwxy7187SzEPMbapcH52gvb emilea;


exit 0

û